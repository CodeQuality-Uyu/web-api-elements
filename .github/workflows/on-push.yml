name: New Package Version

on:
  push:
    branches:
      [
        exception,
        web-api-element
      ]

jobs:
  get_version:
    name: Get PR Title
    runs-on: ubuntu-latest
    outputs:
      pr_title: ${{ steps.extract_version.outputs.pr_title }}
    steps:
      - name: Extract Version
        id: extract_version
        run: |
          # Get the last merged PR for the head branch
          API_RESPONSE=$(curl -s -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{github.repository}}/pulls?state=closed&base=${{ github.ref_name }}&sort=updated&direction=desc&per_page=1")
          
          # Extract the last PR JSON object
          LAST_PR=$(echo "$API_RESPONSE" | jq -r 'map(select(.merged_at != null))[0]')
          echo "Last PR JSON: $LAST_PR"

          # Extract the title of the last merged PR
          LAST_PR_TITLE=$(echo "$LAST_PR" | jq -r '.title')
          SOURCE_PR=$(echo "$LAST_PR" | jq -r '.head.ref')

          echo "Last Merged PR Title: $LAST_PR_TITLE"
          echo "::set-output name=pr_title::$LAST_PR_TITLE"

  pack_publish:
    name: Pack and Publish
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: get_version
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine Package Name
        run: |
          if [ "${{ github.ref_name }}"  == "exception" ]; then
            PACKAGE_NAME="CQ.Exceptions"
          elif [ "${{ github.ref_name }}" == "web-api-element" ]; then
            PACKAGE_NAME="CQ.ApiElements"
          else
            echo "Unknown branch. Exiting."
            exit 1
          fi
          echo "Package Name: $PACKAGE_NAME"

          echo "package_name=$PACKAGE_NAME" >> $GITHUB_ENV

      - name: Install dependencies
        run: dotnet restore $package_name

      - name: Build
        run: dotnet build $package_name --configuration Release /p:Version=${{ needs.get_version.outputs.pr_title }}

      - name: Pack
        run: dotnet pack $package_name --configuration Release /p:Version=${{ needs.get_version.outputs.pr_title }} --no-build --output .

      - name: Show files
        run: ls -la

      - name: Publish
        run: dotnet nuget push $package_name.${{ needs.get_version.outputs.pr_title }}.nupkg --source https://api.nuget.org/v3/index.json --api-key ${NUGET_API_KEY}
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
